diff --git a/src/resolve/resolved-dnstls-openssl.c b/src/resolve/resolved-dnstls-openssl.c
index defddb5..0437590 100644
--- a/src/resolve/resolved-dnstls-openssl.c
+++ b/src/resolve/resolved-dnstls-openssl.c
@@ -381,8 +381,10 @@ int dnstls_manager_init(Manager *manager) {
 
         assert(manager);
 
+#if OPENSSL_VERSION_NUMBER < 0x30000000L
         ERR_load_crypto_strings();
         SSL_load_error_strings();
+#endif
 
         manager->dnstls_data.ctx = SSL_CTX_new(TLS_client_method());
         if (!manager->dnstls_data.ctx)
diff --git a/src/shared/openssl-util.c b/src/shared/openssl-util.c
index c7fcbd9..a20c659 100644
--- a/src/shared/openssl-util.c
+++ b/src/shared/openssl-util.c
@@ -53,16 +53,17 @@ int rsa_encrypt_bytes(
         _cleanup_free_ void *b = NULL;
         size_t l;
 
+        int padding = RSA_PKCS1_PADDING;
+        OSSL_PARAM params[1];
+        params[0] = OSSL_PARAM_construct_int(OSSL_SIGNATURE_PARAM_PAD_MODE, &padding);
+
         ctx = EVP_PKEY_CTX_new(pkey, NULL);
         if (!ctx)
                 return log_debug_errno(SYNTHETIC_ERRNO(EIO), "Failed to allocate public key context");
 
-        if (EVP_PKEY_encrypt_init(ctx) <= 0)
+        if (EVP_PKEY_encrypt_init_ex(ctx, params) <= 0)
                 return log_debug_errno(SYNTHETIC_ERRNO(EIO), "Failed to initialize public key context");
 
-        if (EVP_PKEY_CTX_set_rsa_padding(ctx, RSA_PKCS1_PADDING) <= 0)
-                return log_debug_errno(SYNTHETIC_ERRNO(EIO), "Failed to configure PKCS#1 padding");
-
         if (EVP_PKEY_encrypt(ctx, NULL, &l, decrypted_key, decrypted_key_size) <= 0)
                 return log_debug_errno(SYNTHETIC_ERRNO(EIO), "Failed to determine encrypted key size");
 
